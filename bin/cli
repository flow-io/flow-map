#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' ),
	path = require( 'path' ),
	pkginfo = require( 'pkginfo' ),
	parseArgs = require( 'minimist' ),
	splitStream = require( 'flow-split' ),
	joinStream = require( 'flow-join' ),
	regex = require( 'utils-regex-from-string' ),
	opts = require( './opts.json' ),
	mapStream = require( './../lib' );


// VARIABLES //

var sStream,
	mStream,
	jStream,
	ssep,
	jsep,
	args,
	pkg,
	fcn;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 1 );
}

/**
* FUNCTION: onError( evt )
*	Event listener invoked when a stream instance emits an `error`.
*
* @private
* @param {Object} evt - error event object
*/
function onError( evt ) {
	console.error( evt );
}


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE INFO //

pkg = pkginfo.read( require.main );
process.title = pkg.package.name;


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( require( './../package.json' ).version );
	return;
}


// OPTIONS //

opts = {};

// Split separator:
if ( args.split ) {
	ssep = regex( args.split );
	if ( ssep === null ) {
		ssep = args.split;
	}
} else {
	ssep = /\r?\n/;
}

// Join separator:
if ( args.join ) {
	jsep = args.join;
} else {
	jsep = '\n';
}

// highWaterMark: (default: 16KB)
if ( args.hasOwnProperty( 'highwatermark' ) ) {
	opts.highWaterMark = args.highwatermark;
}

// allowHalfOpen: (default: false)
if ( args.allowhalfopen ) {
	opts.allowHalfOpen = true;
}


// FUNCTION //

fcn = args._[ 0 ];
if ( !fcn ) {
	throw new Error( 'insufficient input arguments. Must provide a file which exports a map function.' );
}
fcn = path.resolve( __dirname, '..', fcn );
fcn = require( fcn );


// STREAM //

// Create a new split stream:
sStream = splitStream({
	'sep': ssep
});

// Create a new map stream:
mStream = mapStream( opts, fcn );

// Create a new join stream:
jStream = joinStream({
	'sep': jsep
});

// Add event listeners:
sStream.on( 'error', onError );
mStream.on( 'error', onError );
jStream.on( 'error', onError );

// Create the pipeline:
process.stdin
	.pipe( sStream )
	.pipe( mStream )
	.pipe( jStream )
	.pipe( process.stdout );
